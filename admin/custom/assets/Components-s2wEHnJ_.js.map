{"version":3,"file":"Components-s2wEHnJ_.js","sources":["../../node_modules/__mf__virtual/ConfigCustomTelegramSet__loadShare___mf_0_iobroker_mf_1_json_mf_2_config__loadShare__.js","../../src/TelegramComponent.tsx","../../src/Components.tsx"],"sourcesContent":["\n    \n    ;() => import(\"__mf__virtual/ConfigCustomTelegramSet__prebuild___mf_0_iobroker_mf_1_json_mf_2_config__prebuild__.js\").catch(() => {});\n    // dev uses dynamic import to separate chunks\n    \n    const {loadShare} = require(\"@module-federation/runtime\")\n    const {initPromise} = require(\"__mf__virtual/ConfigCustomTelegramSet__mf_v__runtimeInit__mf_v__.js\")\n    const res = initPromise.then(_ => loadShare(\"@iobroker/json-config\", {\n    customShareInfo: {shareConfig:{\n      singleton: true,\n      strictVersion: false,\n      requiredVersion: \"*\"\n    }}}))\n    const exportModule = await res.then(factory => factory())\n    module.exports = exportModule\n  ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n    LinearProgress, Table, TableBody,\r\n    TableCell, TableContainer, TableHead,\r\n    TableRow, Paper, Checkbox, IconButton,\r\n} from '@mui/material';\r\nimport { Delete as IconDelete } from '@mui/icons-material';\r\n// important to make from package and not from some children.\r\n// invalid\r\n// import ConfigGeneric from '@iobroker/adapter-react-v5/ConfigGeneric';\r\n// valid\r\nimport { Confirm, I18n } from '@iobroker/adapter-react-v5';\r\nimport { ConfigGeneric, ConfigGenericProps, ConfigGenericState } from '@iobroker/json-config';\r\n\r\ninterface TelegramUser {\r\n    id: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    userName: string;\r\n    sysMessages: boolean;\r\n}\r\n\r\nclass TelegramComponent extends ConfigGeneric<ConfigGenericProps, ConfigGenericState & {\r\n    alive: boolean;\r\n    initialized: boolean;\r\n    users: { id: string; names: string; sysMessages: boolean }[];\r\n    confirm: string | null;\r\n}> {\r\n    constructor(props: ConfigGenericProps) {\r\n        super(props);\r\n        this.state = {\r\n            ...this.state,\r\n            alive: false,\r\n            initialized: false,\r\n            users: [],\r\n            confirm: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        super.componentDidMount();\r\n\r\n        this.props.oContext.socket.getState(`system.adapter.telegram.${this.props.oContext.instance}.alive`)\r\n            .then(async (state) => {\r\n                if (state && state.val) {\r\n                    this.setState({ alive: true }, () => this.readData());\r\n                } else {\r\n                    this.setState({ alive: false });\r\n                }\r\n\r\n                await this.props.oContext.socket.subscribeState(`system.adapter.telegram.${this.props.oContext.instance}.alive`, this.onAliveChanged);\r\n            });\r\n    }\r\n\r\n    readData() {\r\n        this.props.oContext.socket.sendTo(`telegram.${this.props.oContext.instance}`, 'adminuser', null)\r\n            .then((obj: Record<string, TelegramUser>) => {  // get admin user\r\n                const users = [];\r\n                for (const id in obj) {\r\n                    const names: string[] = [];\r\n                    obj[id].userName  && names.push(obj[id].userName);\r\n                    obj[id].firstName && names.push(obj[id].firstName);\r\n                    users.push({\r\n                        id,\r\n                        names: names.join(' / '),\r\n                        sysMessages: obj[id].sysMessages,\r\n                    });\r\n                }\r\n                this.setState({ users, initialized: true });\r\n            });\r\n    }\r\n\r\n    async componentWillUnmount() {\r\n        await this.props.oContext.socket.unsubscribeState(`system.adapter.telegram.${this.props.oContext.instance}.alive`, this.onAliveChanged);\r\n    }\r\n\r\n    onAliveChanged = (id: string, state: ioBroker.State | null | undefined) => {\r\n        const alive: boolean = state ? state.val as boolean : false;\r\n        if (alive !== this.state.alive) {\r\n            this.setState({ alive }, () => {\r\n                if (alive && !this.state.initialized) {\r\n                    this.readData();\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    onSysMessageChange(id: string) {\r\n        const pos = this.state.users.findIndex(item => item.id === id);\r\n        if (pos !== -1) {\r\n            const checked = !this.state.users[pos].sysMessages;\r\n\r\n            this.props.oContext.socket.sendTo(`telegram.${this.props.oContext.instance}`, 'systemMessages', { itemId: id, checked })\r\n                .then((obj: string) => {\r\n                    if (obj === id) {\r\n                        const users:TelegramComponent['state']['users'] = JSON.parse(JSON.stringify(this.state.users));\r\n                        const pos = users.findIndex(item => item.id === id);\r\n                        if (pos !== -1) {\r\n                            users[pos].sysMessages = checked;\r\n                            this.setState({ users });\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    onDelete(id: string) {\r\n        this.props.oContext.socket.sendTo(`telegram.${this.props.oContext.instance}`, 'delUser', id)\r\n            .then((obj: string) => {\r\n                if (obj === id) {\r\n                    const users: TelegramComponent['state']['users']\r\n                     = JSON.parse(JSON.stringify(this.state.users));\r\n                    const pos = users.findIndex(item => item.id === id);\r\n                    if (pos !== -1) {\r\n                        users.splice(pos, 1);\r\n                        this.setState({ users });\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    renderConfirmDialog() {\r\n        if (this.state.confirm) {\r\n            return <Confirm\r\n                onClose={result => {\r\n                    const id = this.state.confirm;\r\n                    this.setState({ confirm: null }, () => result && this.onDelete(id!));\r\n                }}\r\n            />;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    renderItem() {\r\n        if (!this.state.alive && !this.state.initialized) {\r\n            return <div>{I18n.t('custom_telegram_not_alive')}</div>;\r\n        } else if (!this.state.initialized) {\r\n            return <LinearProgress />;\r\n        } else {\r\n            return <div style={{ width: '100%'}}>\r\n                <h4>{I18n.t('custom_telegram_title')}</h4>\r\n                <TableContainer component={Paper} style={{ width: '100%' }}>\r\n                    <Table style={{ width: '100%' }} size=\"small\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>{I18n.t('custom_telegram_id')}</TableCell>\r\n                                <TableCell>{I18n.t('custom_telegram_name')}</TableCell>\r\n                                <TableCell>{I18n.t('custom_telegram_sys_messages')}</TableCell>\r\n                                <TableCell></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {this.state.users.map(user => <TableRow\r\n                                key={user.id}\r\n                                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                            >\r\n                                <TableCell component=\"th\" scope=\"row\">{user.id}</TableCell>\r\n                                <TableCell>{user.names}</TableCell>\r\n                                <TableCell>\r\n                                    <Checkbox\r\n                                        disabled={!this.state.alive}\r\n                                        checked={!!user.sysMessages}\r\n                                        onClick={() => this.onSysMessageChange(user.id)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <IconButton\r\n                                        disabled={!this.state.alive}\r\n                                        onClick={() => this.setState({ confirm: user.id })}\r\n                                    >\r\n                                        <IconDelete />\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                            </TableRow>)}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                {this.renderConfirmDialog()}\r\n            </div>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default TelegramComponent;\r\n","import TelegramComponent from './TelegramComponent';\r\n\r\nexport default { TelegramComponent };"],"names":["loadShare","require$$0","initPromise","require$$1","res","_","exportModule","factory","ConfigCustomTelegramSet__loadShare___mf_0_iobroker_mf_1_json_mf_2_config__loadShare__","TelegramComponent","ConfigGeneric","props","state","obj","users","id","names","alive","pos","item","checked","jsx","Confirm","result","I18n","TableContainer","Paper","jsxs","Table","TableHead","TableRow","TableCell","TableBody","user","Checkbox","IconButton","IconDelete","LinearProgress","Components"],"mappings":"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","x_google_ignoreList":[0]}